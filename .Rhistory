}
}
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
# find the model with glm()
m1 <- glm(high_use ~ sex + absences + failures + goout, data = alc, family = "binomial")
summary(m1)
setwd("C:/Users/Anton/Documents/IODS-project/data/")
getwd()
# Saving the dataset locally
write.csv(alc,file="alc")
#sandbox
# install.packages("ggplot2")
# install.packages("tidyr")
# muista ottaa G3 pois join_by
library(ggplot2)
library(tidyr)
# alc <- read.table("C:/Users/Anton/Documents/IODS-project/data/alc",sep = ",", header=TRUE)
# g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# g1 + geom_boxplot()
#
# g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# g2 + geom_boxplot()
# Anton Jyrkiäinen, 16.11.2018, week 3 R exercise.
# Data used: https://archive.ics.uci.edu/ml/machine-learning-databases/00320/
# install.packages("dplyr")
library(dplyr)
# Files load to variables.
student_mat <- read.table("C:/Users/Anton/Documents/IODS-project/student-mat.csv", sep = ";", header=TRUE)
student_por <- read.table("C:/Users/Anton/Documents/IODS-project/student-por.csv", sep = ";", header=TRUE)
# Structure
str(student_mat)
str(student_por)
# Dimensions
dim(student_mat)
dim(student_por)
join_by <- c("G3", "school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
math_por <- inner_join(student_mat, student_por, by = join_by, suffix = c(".math",".por"))
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(student_mat)[!colnames(student_mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else {
# else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
glimpse(alc)
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
# find the model with glm()
m1 <- glm(high_use ~ sex + absences + failures + goout, data = alc, family = "binomial")
summary(m1)
setwd("C:/Users/Anton/Documents/IODS-project/data/")
getwd()
# Saving the dataset locally
write.csv(alc,file="alc")
#sandbox
# install.packages("ggplot2")
# install.packages("tidyr")
# muista ottaa G3 pois join_by
library(ggplot2)
library(tidyr)
# alc <- read.table("C:/Users/Anton/Documents/IODS-project/data/alc",sep = ",", header=TRUE)
# g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# g1 + geom_boxplot()
#
# g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# g2 + geom_boxplot()
# Anton Jyrkiäinen, 16.11.2018, week 3 R exercise.
# Data used: https://archive.ics.uci.edu/ml/machine-learning-databases/00320/
# install.packages("dplyr")
library(dplyr)
# Files load to variables.
student_mat <- read.table("C:/Users/Anton/Documents/IODS-project/student-mat.csv", sep = ";", header=TRUE)
student_por <- read.table("C:/Users/Anton/Documents/IODS-project/student-por.csv", sep = ";", header=TRUE)
# Structure
str(student_mat)
str(student_por)
# Dimensions
dim(student_mat)
dim(student_por)
join_by <- c("G3", "school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
math_por <- inner_join(student_mat, student_por, by = join_by, suffix = c(".math",".por"))
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(student_mat)[!colnames(student_mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else {
# else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
glimpse(alc)
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
# find the model with glm()
m1 <- glm(high_use ~ sex + absences + failures + goout, data = alc, family = "binomial")
summary(m1)
setwd("C:/Users/Anton/Documents/IODS-project/data/")
getwd()
# Saving the dataset locally
write.csv(alc,file="alc")
#sandbox
# install.packages("ggplot2")
# install.packages("tidyr")
# muista ottaa G3 pois join_by
library(ggplot2)
library(tidyr)
# alc <- read.table("C:/Users/Anton/Documents/IODS-project/data/alc",sep = ",", header=TRUE)
# g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# g1 + geom_boxplot()
#
# g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# g2 + geom_boxplot()
####################################################################
### Author: Anni Norring                                         ###
### Date: 16.11.2017 						                                 ###
### Content: This script contains the R code for RStudio         ###
###         Excercise 3 in IODS 2017. 						               ###
####################################################################
####################################################################
###                     DATA WRANGLING                           ###
####################################################################
### Part 2
# The data was downloaded from https://archive.ics.uci.edu/ml/datasets/Student+Performance. At this point it consists
#   of two data sets: students-mat.csv and students-por.csv, which are the results of two questionnaires answered
#   by students on a math class and on a portuguese class respectively.The aim is to combine these two data sets for
#   further analysis.
####################################################################
### Part 3
## Read both sets of data into R from the IODS-project/data -folder:
# Start by checking the current working directory:
getwd()
# ... which is not the right one. Thus we need to:
# Set the working directory to be the IODS project folder:
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project/data")
# Next read both tables into R. From the file preview we can easily see that the data is separated by ;.
math <- read.table("student-mat.csv", header = TRUE, sep = ";")
por <- read.table("student-por.csv", header = TRUE, sep = ";")
# Now we can explore the data frames a bit by using the familiar functions for looking at dimensions, structure,
#   column names and first six rows of observations of the data.
dim(math)
str(math)
head(math)
# The mat data frame has 395 observations on 33 variables. The data frame and the first six rows appear OK.
dim(por)
str(por)
head(por)
# The por data frame is somewhat larger, as it has 649 observations on 33 variables.  The data frame and the first
#   six rows appear OK.
# Next let's compare the column names of the two data frames:
colnames(math)
colnames(por)
# From here it easy two see that the column names and thus variables are the same in both data frames.
####################################################################
### Part 4
## Join the two data sets using the variables "school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu",
##  "Mjob", "Fjob", "reason", "nursery","internet" as (student) identifiers. Keep only the students present in both
##   data sets. Explore the structure and dimensions of the joined data.
# We will join the data sets using inner.join() function as in the DataCamp exercises. With this function we will end
#   up with a data set that contains only the students who answered the questionnaires on both classes.
# Access the dplyr library:
library(dplyr)
# Choose common columns to use as identifiers to identify the students that answered both surveys:
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# Join the two datasets by the selected identifiers. Now we have a data set that includes only the students that
#   answered both surveys:
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# See the new column names:
colnames(math_por)
# Note that some of the columns don't have and some do have a suffix that refers to the original data sets. The ones
#   that don't have a suffix are those 13 common variables that we used to identify the students that answered both
#   surveys.
# See the dimensions, structure and first six rows of the new data set:
dim(math_por)
str(math_por)
head(math_por)
# The new data set has 382 observations on 53 variables.
# Glimpse at the data. Note that this function also gives us the dimensions of the data set.
glimpse(math_por)
# From here one could note that there appears to be more common columns, such as "guardian", "schoolsup" and "famsup".
#   Perhaps these could have also been included in the identifiers?
####################################################################
### Part 5
##  Copy the solution from the DataCamp exercise The if-else structure to combine the 'duplicated' answers in
##    the joined data.
# We'll start by creating a new data frame with only the joined columns. We'll name it alc, as we are aiming to study
#   the alcohol consumption of these students.
alc <- select(math_por, one_of(join_by))
# Choose the columns in the datasets which were not used for joining the data and name them notjoined_columns. Recall
#   that the logical operator ! means NOT and thus our function assigns all the variables that are NOT in the join_by
#   object into an object called notjoined_columns. Note that we are using the original colnames in math, and not the
#   colnames in the new data set math_por.
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# Print out the columns not used for joining to check that they are the correct ones:
notjoined_columns
# Next use a combination of the foor-loop and the if-else structure to combine the duplicated answers (possibly
#   different answers to the same questions for each student) present in the new data set.  We combine these answers
#   by either taking a rounded average of numeric variables or choosing the first answer for non-numeric variables:
# For every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# and select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# Glimpse at the new combined data:
glimpse(alc)
# There are no more variables with a suffix in the name.
####################################################################
### Part 6
## Take the average of the answers related to weekday and weekend alcohol consumption to create a new column
##    'alc_use' to the joined data. Then use 'alc_use' to create a new logical column 'high_use' which is TRUE for
##    students for which 'alc_use' is greater than 2 (and FALSE otherwise).
# First we define a new column alc_use by combining weekday and weekend alcohol use and taking their average:
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# Then we define a new logical column 'high_use' which takes value TRUE if the the value of alc_use is greater than
#   two, and value FALSE otherwise.
alc <- mutate(alc, high_use = alc_use > 2)
####################################################################
### Part 7
# Glimpse at the new combined data:
glimpse(alc)
# Everything appears to be OK. There are 382 observations of 35 variables, i.e. just as we should have.
# Lastly, we'll save the joined and modified data set to the data folder. In order not to run into working directory
#   problems while working with analysis part, we will save the data set to the same working directory as the
#   RMarkdown file we will use for the analysis.
# Set the working directory to be the IODS project folder:
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project")
# Save the data set:
write.table(alc, file = "alc.csv", sep = ";", col.names = TRUE)
####################################################################
m1 <- glm(high_use ~ sex + absences + failures + goout, data = alc, family = "binomial")
summary(m1)
# Anton Jyrkiäinen, 16.11.2018, week 3 R exercise.
# Data used: https://archive.ics.uci.edu/ml/machine-learning-databases/00320/
# install.packages("dplyr")
library(dplyr)
# Files load to variables.
student_mat <- read.table("C:/Users/Anton/Documents/IODS-project/student-mat.csv", sep = ";", header=TRUE)
student_por <- read.table("C:/Users/Anton/Documents/IODS-project/student-por.csv", sep = ";", header=TRUE)
# Structure
str(student_mat)
str(student_por)
# Dimensions
dim(student_mat)
dim(student_por)
join_by <- c("G3", "school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
math_por <- inner_join(student_mat, student_por, by = join_by, suffix = c(".math",".por"))
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(student_mat)[!colnames(student_mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else {
# else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
setwd("C:/Users/Anton/Documents/IODS-project/data/")
getwd()
# Saving the dataset locally
write.csv(alc,file="alc")
#sandbox
# install.packages("ggplot2")
# install.packages("tidyr")
# muista ottaa G3 pois join_by
library(ggplot2)
library(tidyr)
alc <- read.table("C:/Users/Anton/Documents/IODS-project/data/alc",sep = ",", header=TRUE)
# g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# g1 + geom_boxplot()
#
# g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# g2 + geom_boxplot()
m1 <- glm(high_use ~ sex + absences + failures + goout, data = alc, family = "binomial")
summary(m1)
# Anton Jyrkiäinen, 16.11.2018, week 3 R exercise.
# Data used: https://archive.ics.uci.edu/ml/machine-learning-databases/00320/
# install.packages("dplyr")
library(dplyr)
# Files load to variables.
student_mat <- read.table("C:/Users/Anton/Documents/IODS-project/student-mat.csv", sep = ";", header=TRUE)
student_por <- read.table("C:/Users/Anton/Documents/IODS-project/student-por.csv", sep = ";", header=TRUE)
# Structure
str(student_mat)
str(student_por)
# Dimensions
dim(student_mat)
dim(student_por)
join_by <- c("G3", "school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
math_por <- inner_join(student_mat, student_por, by = join_by, suffix = c(".math",".por"))
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(student_mat)[!colnames(student_mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else {
# else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
setwd("C:/Users/Anton/Documents/IODS-project/data/")
getwd()
# Saving the dataset locally
write.csv(alc,file="alc")
#sandbox
# install.packages("ggplot2")
# install.packages("tidyr")
# muista ottaa G3 pois join_by
library(ggplot2)
library(tidyr)
alc <- read.table("C:/Users/Anton/Documents/IODS-project/data/alc",sep = ",", header=TRUE)
# g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# g1 + geom_boxplot()
#
# g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# g2 + geom_boxplot()
m1 <- glm(high_use ~ sex + absences + failures + studytime, data = alc, family = "binomial")
summary(m1)
---
output:
html_document: default
pdf_document: default
---
# Logistic regression
Week 2,
Anton Jyrkiäinen
Dependancies used:
```{r message=FALSE}
library(dplyr);
library(ggplot2);
library(tidyr);
```
First we import the data which we wrangled and saved locally in the first part of the exercise. The data is set to a variable ```alc``` using read.table.
```{r}
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep = ",", header=TRUE)
```
Variables in the dataset:
```{r}
names(alc)
```
The dataset consists of data collected from school reports and questionnaires from two different Portugese schools regarding the performance in two subjects: mathematics and Portugese.
Link to the data [here](https://archive.ics.uci.edu/ml/machine-learning-databases/00320/) and link to metadata
[here](https://archive.ics.uci.edu/ml/datasets/Student+Performance).
Absences, studytime and grades go together quite well when doing analysis of school performance. I expect that absences are positively correlated and studytime and grades negatively correlated with high alcohol use. It would also be interesting to see if gender makes any difference in this. Therefor the variables to be used are ```absences```, ```studytime```, ```G3``` and ```sex```.
Barplot of each variable we're interested in:
```{r warning=FALSE}
barplotVariables <- select(alc, one_of("sex","absences","studytime","G1"));
gather(barplotVariables) %>% ggplot(data = alc, aes(x = value)) + geom_bar();
```
In the barplots we can observe the distribution of the variables we've chosen. We can see that it is more common to have none or less absences. Most of the students are getting average or a bit above average grades. There's slightly more males than females. Majority of the students seem to study less than 2 hours or 2-5 hours weekly.
Grade means by group:
```{r}
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
```
Among the female students theres a small grade drop of 0.3 points when the person is considered to have high use of alcohol. Among the male students the drop is more than twice as big, 0.63 points, when considered to have high use of alcohol. The sampling is quite small (38 students) but we can make an assumption that there might be relationship between alcohol use and grades.
Absence mean by group:
```{r}
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_absences = mean(absences))
```
Again we can observe that the high alcohol use has a negative impact to the student. The absences are more than doubled with students that are categorized in the high use group.
Study time mean by group:
```{r}
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_studytime = mean(studytime))
```
Average studying times don't have much of a difference other than among the female student there's a small drop of studying time with high alcohol use.
```{r}
m1 <- glm(high_use ~ sex + absences + failures + studytime, data = alc, family = "binomial")
summary(m1)
```
<!-- g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex)) -->
<!-- g1 + geom_boxplot() -->
<!-- g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex)) -->
<!-- g2 + geom_boxplot() -->
#Anton JyrkiÃ¤inen
#9.11.2018
#Data used http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt
# installing of packages need only to be run once
# install.packages("dplyr")
# install.packages("ggplot2")
# install.packages("GGally")
library(GGally)
library(ggplot2)
library(dplyr)
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
# structure of the data
# The output shows us some meta data about the data in general and about each column:
# amount of rows and columns, name of each column, data type and the first values.
str(lrn14)
# dimensions of the data
# Returns the number of rows and colums
dim(lrn14)
# Questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# Select the columns related to deep learning and create column 'deep' by averaging.
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# Select the columns related to surface learning and create column 'surf' by averaging.
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# Select the columns related to strategic learning and create column 'stra' by averaging.
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
# Define a new dataset 'learning2014'. Get only the columns we want using select() and one_of()
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
learning2014 <- select(lrn14, one_of(keep_columns))
# Exclude observations where the exam points are 0 by using filter()
learning2014 <- filter(learning2014, Points > 0)
# Dimensions of new dataset
dim(learning2014)
# Setting and printing working directory
setwd("C:/Users/Anton/Documents/IODS-project/")
getwd()
# Saving the dataset locally
write.table(learning2014,file="learning2014.txt")
# Testing saved dataset. Shows same results as the dim(learning2014)
importedDataset <- read.table("C:/Users/Anton/Documents/IODS-project/learning2014.txt")
dim(importedDataset)
#sandbox
lm1 <- lm(formula = Points ~ Attitude + stra + deep, data = learning2014)
summary(lm1)
lm1 <- lm(formula = Points ~ Attitude + stra, data = learning2014)
summary(lm1)
plot(lm1, which = c(1,2,5))
